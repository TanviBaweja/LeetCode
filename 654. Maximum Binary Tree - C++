/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int maxindex(vector<int>& nums,int start, int end)
    {
        auto index= max_element(nums.begin()+start,nums.begin()+end+1);
        return index-nums.begin();            
    }
    
    void helper(TreeNode *root,vector<int>& nums, int start, int end,int n)
    {
        if(start>end)
        { 
            return;
        }
        int index= maxindex(nums,start,end);
        root->val=nums[index];
        if(start<=index-1)
            root->left=new TreeNode;
        helper(root->left,nums,start,index-1,n );
        if(index+1<=end)
            root->right=new TreeNode;
        helper(root->right,nums,index+1,end,n);
    }
    
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) 
    {
        TreeNode* root= new TreeNode();
        helper(root,nums,0,nums.size()-1,nums.size()-1);
        return root;
    }
};
