/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    stack<int> s;
    int sum=0;
    void showstack(stack<int> a) 
    { 
        while (!a.empty()) 
        { 
            cout << a.top()<<endl; 
            a.pop(); 
        }  
    }

    void stackfunction()
    {
       
        stack<int> newstack;
        ;
        int *ptr= &(s.top());
        int i;
        //cout<<"size"<<size;
        for(i=0;i<s.size();i++)
            newstack.push(*(ptr-i));            
        //showstack(newstack);
        int size= newstack.size();
        for(i=1;i<=size;i++)
        {
            int a=newstack.top();
            
            cout<<a;
            sum+= a * pow(10,size-i);
            newstack.pop();
        }
       
        s.pop();
        //cout<<"sum:"<<sum<<endl;
    }   
   
    void myfunction(TreeNode* root)
    {
        //cout<<"mf "<<root->val<<" sum:"<<sum<<endl;
        if(root==NULL)
            return;
        if(root->left==NULL and root->right==NULL)
        {   
            s.push(root->val);
            //cout<<"***";
            stackfunction();
            //showstack();
            return;
        }
        else
        {
            s.push(root->val);
            myfunction(root->left);
            //if(s.top()==root->val)
            myfunction(root->right);
            s.pop();
        }
    }
   
    int sumNumbers(TreeNode* root)
    {
        myfunction(root);
        //cout<<sum;
       
        return sum;
    }
};
